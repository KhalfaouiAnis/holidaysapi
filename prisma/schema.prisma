generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String             @id @default(cuid())
  name                  String
  created_at            DateTime           @default(now())
  updated_at            DateTime           @updatedAt
  avatar                String
  username              String             @unique
  email                 String             @unique
  password              String
  properties            Property[]         @relation("UserProperties")
  bookings              Booking[]
  favorites             Favorite[]
  propertyId            String?
  Property              Property?          @relation(fields: [propertyId], references: [id])
  ratingsGiven          Ratings[]
  userNotifications     UserNotification[]
  targetedNotifications Notification[]     @relation("TargetedNotification")
}

model Property {
  id              String     @id @default(cuid())
  name            String
  description     String
  price_per_night Float
  ownerId         String
  owner           User       @relation("UserProperties", fields: [ownerId], references: [id])
  created_at      DateTime   @default(now())
  updated_at      DateTime   @updatedAt
  images          String[]
  address         String
  city            String
  country         String
  amenities       String
  capacity        Int
  longitude       Float
  latitude        Float
  latitude_delta  Float
  longitude_delta Float
  bookings        Booking[]
  favorites       Favorite[]
  is_featured     Boolean?   @default(false)
  User            User[]
  ratings         Ratings[]

  @@index([ownerId])
}

model Booking {
  id                  String    @id @default(cuid())
  created_at          DateTime  @default(now())
  updated_at          DateTime  @updatedAt
  deleted_at          DateTime?
  property_id         String
  user_id             String
  check_in            DateTime
  check_out           DateTime
  total_price         Float
  status              String    @default("pending")
  guest_count         Int
  special_requests    String?
  cancellation_reason String?
  payment_intent_id   String?
  payment_status      String    @default("pending")

  property         Property           @relation(fields: [property_id], references: [id])
  user             User               @relation(fields: [user_id], references: [id])
  UserNotification UserNotification[]

  @@index([property_id])
  @@index([user_id])
}

model Favorite {
  user_id     String
  property_id String
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  user        User     @relation(fields: [user_id], references: [id])
  property    Property @relation(fields: [property_id], references: [id])

  @@id([user_id, property_id])
}

model Ratings {
  rating      Int
  user_id     String
  property_id String
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  property    Property @relation(fields: [property_id], references: [id])
  user        User     @relation(fields: [user_id], references: [id])

  @@id([user_id, property_id])
}

model Notification {
  id           String           @id @default(cuid())
  title        String?
  message      String
  type         NotificationType
  targetUserId String?
  createdAt    DateTime         @default(now())

  userNotifications UserNotification[]
  targetUser        User?              @relation("TargetedNotification", fields: [targetUserId], references: [id])

  @@index([targetUserId])
}

model UserNotification {
  id             String       @id @default(cuid())
  notificationId String
  userId         String
  isRead         Boolean      @default(false)
  readAt         DateTime?
  Booking        Booking?     @relation(fields: [bookingId], references: [id])
  bookingId      String?
  notification   Notification @relation(fields: [notificationId], references: [id])
  user           User         @relation(fields: [userId], references: [id])

  @@unique([notificationId, userId])
}

enum NotificationType {
  NEW_PLACE
  BOOKING
}
